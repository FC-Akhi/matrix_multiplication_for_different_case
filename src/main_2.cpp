// cpu_matrix_mult_v2
// Constant 2nd matrix wih size 625
// using transpose module on 2nd matrix

#include <iostream>


// transpose unit
void mat_transpose(float *mat_b, float *mat_b_transpose, int row_b, int col_b)
{
    int k = 0;

    for(int j = 0; j < col_b; j++){
        for(int i = 0; i < row_b; i++){
            mat_b_transpose[k] = mat_b[(i * col_b) + j];
            k++;
        }
    }

}



// My second version -  mat_a(row_a x col_a)  x  mat_b_transpose(col_b x row_b)  =  mat_res_3(row_a x col_b)
void cpu_matrix_mult_v2(float *mat_a, float *mat_b, float *mat_b_transpose, float *mat_res, int row_a, int col_a, int row_b, int col_b)
{   
    
    // transpose 2nd matrix for better performance
    mat_transpose(mat_b, mat_b_transpose, row_b, col_b);

    for (int i = 0; i < row_a; ++i) 
    {
        for (int k = 0; k < col_b; ++k) 
        {
            float tmp = 0.0f;
            for (int j = 0; j < col_a; ++j)
            {
                tmp += mat_a[(i * col_a) + j] * mat_b_transpose[(k * col_a) + j];
            }
            mat_res[(i * col_b) + k] = tmp;
            // m++;
        }
    }
}



int main()
{

    int row_a;
    int col_a;
    int row_b;
    int col_b;

    // mat_a row and col size input
    std::cout<<"Enter number of row in array 1::";
    std::cin>>row_a;
    std::cout<<"Enter number of col in array 1::";
    std::cin>>col_a;

    // mat_b row and col size input
    std::cout<<"Enter number of row in array 2::";
    std::cin>>row_b;
    std::cout<<"Enter number of col in array 2::";
    std::cin>>col_b;

    // matrix declaration
    float *mat_a = new float[row_a * col_a];
    
    float mat_b[625] = {0.07193f, 0.37912f, 0.77623f, 0.12440f, 0.66947f, 0.15053f, 0.96167f, 0.99584f, 0.84395f, 0.53573f, 0.23059f, 0.20030f, 0.46239f, 0.24695f, 0.57113f, 0.44281f, 0.74645f, 0.76194f, 0.39863f, 0.80143f, 0.69540f, 0.20154f, 0.13363f, 0.50546f, 0.50669f, 0.16374f, 0.83791f, 0.43943f, 0.12674f, 0.12166f, 0.91355f, 0.19867f, 0.50077f, 0.68979f, 0.32306f, 0.17024f, 0.84031f, 0.28473f, 0.16609f, 0.68427f, 0.82046f, 0.39668f, 0.88457f, 0.28285f, 0.64362f, 0.45570f, 0.72566f, 0.39007f, 0.21764f, 0.12428f, 0.19150f, 0.91304f, 0.32583f, 0.32513f, 0.41851f, 0.83251f, 0.48887f, 0.25642f, 0.27194f, 0.61561f, 0.37807f, 0.18549f, 0.81427f, 0.87884f, 0.87527f, 0.13734f, 0.04909f, 0.71559f, 0.42207f, 0.21518f, 0.39985f, 0.24253f, 0.61185f, 0.28442f, 0.52538f, 0.25547f, 0.74012f, 0.25104f, 0.64554f, 0.95777f, 0.37532f, 0.83705f, 0.87081f, 0.70115f, 0.16218f, 0.28932f, 0.53366f, 0.65105f, 0.54573f, 0.80560f, 0.26666f, 0.92380f, 0.99109f, 0.08093f, 0.80265f, 0.86636f, 0.21827f, 0.85173f, 0.58195f, 0.64034f, 0.06691f, 0.98180f, 0.88287f, 0.67876f, 0.26622f, 0.40826f, 0.93423f, 0.00634f, 0.65929f, 0.57978f, 0.96411f, 0.03462f, 0.41683f, 0.83492f, 0.73577f, 0.57901f, 0.12424f, 0.26943f, 0.23006f, 0.66997f, 0.07503f, 0.49672f, 0.59377f, 0.06612f, 0.57765f, 0.39642f, 0.93248f, 0.79592f, 0.24815f, 0.51443f, 0.43626f, 0.31506f, 0.49623f, 0.31914f, 0.99382f, 0.76246f, 0.72739f, 0.92806f, 0.76880f, 0.38669f, 0.50784f, 0.73291f, 0.42130f, 0.92466f, 0.56783f, 0.15707f, 0.50367f, 0.69207f, 0.42650f, 0.73373f, 0.36203f, 0.50153f, 0.23044f, 0.95580f, 0.56765f, 0.80810f, 0.35222f, 0.50014f, 0.60402f, 0.60037f, 0.01457f, 0.04028f, 0.91543f, 0.51081f, 0.35942f, 0.90925f, 0.27326f, 0.08681f, 0.83731f, 0.04206f, 0.47350f, 0.34514f, 0.77497f, 0.89480f, 0.26980f, 0.34280f, 0.05187f, 0.77347f, 0.03487f, 0.47837f, 0.50720f, 0.39690f, 0.97991f, 0.73764f, 0.35271f, 0.54756f, 0.54574f, 0.70493f, 0.04770f, 0.14976f, 0.30530f, 0.06227f, 0.19004f, 0.22072f, 0.57308f, 0.54946f, 0.12997f, 0.84635f, 0.63627f, 0.96728f, 0.88841f, 0.10977f, 0.31242f, 0.66339f, 0.00457f, 0.58222f, 0.00619f, 0.05644f, 0.35569f, 0.04106f, 0.53481f, 0.86289f, 0.43796f, 0.51472f, 0.60053f, 0.79066f, 0.06228f, 0.14627f, 0.49559f, 0.10998f, 0.29603f, 0.80089f, 0.17225f, 0.48607f, 0.02161f, 0.74533f, 0.03553f, 0.15158f, 0.59168f, 0.67180f, 0.11886f, 0.48009f, 0.78156f, 0.43128f, 0.14348f, 0.78613f, 0.01351f, 0.14967f, 0.84257f, 0.36920f, 0.19073f, 0.37737f, 0.23209f, 0.62869f, 0.89209f, 0.83262f, 0.41935f, 0.95437f, 0.97889f, 0.91494f, 0.06434f, 0.27491f, 0.71583f, 0.23660f, 0.76098f, 0.73744f, 0.98193f, 0.79650f, 0.88902f, 0.57361f, 0.46830f, 0.00788f, 0.05371f, 0.24987f, 0.43917f, 0.19719f, 0.03600f, 0.45268f, 0.34685f, 0.87856f, 0.82187f, 0.53758f, 0.25594f, 0.05396f, 0.16627f, 0.14803f, 0.88658f, 0.58562f, 0.10239f, 0.86547f, 0.50056f, 0.16674f, 0.14038f, 0.21639f, 0.40334f, 0.90135f, 0.95383f, 0.38527f, 0.69786f, 0.84285f, 0.95888f, 0.16616f, 0.85073f, 0.01258f, 0.41603f, 0.28990f, 0.20977f, 0.45203f, 0.74258f, 0.55662f, 0.33059f, 0.56445f, 0.09421f, 0.58653f, 0.61841f, 0.26047f, 0.73455f, 0.50500f, 0.84609f, 0.83695f, 0.37046f, 0.34666f, 0.00369f, 0.51084f, 0.56305f, 0.40703f, 0.41220f, 0.51687f, 0.79229f, 0.11005f, 0.35972f, 0.75117f, 0.27622f, 0.21045f, 0.76376f, 0.69225f, 0.50035f, 0.97353f, 0.14428f, 0.24293f, 0.53015f, 0.47487f, 0.80738f, 0.62436f, 0.06139f, 0.42580f, 0.88483f, 0.79595f, 0.93079f, 0.73093f, 0.63290f, 0.30125f, 0.07758f, 0.63659f, 0.81209f, 0.64063f, 0.04361f, 0.22429f, 0.15750f, 0.83590f, 0.33434f, 0.51722f, 0.58707f, 0.61056f, 0.72767f, 0.35083f, 0.30281f, 0.22802f, 0.32436f, 0.44709f, 0.47095f, 0.85451f, 0.92195f, 0.27833f, 0.47886f, 0.98335f, 0.70413f, 0.36369f, 0.77929f, 0.63492f, 0.09462f, 0.41219f, 0.93618f, 0.17220f, 0.04878f, 0.74827f, 0.81283f, 0.09239f, 0.97256f, 0.97034f, 0.92829f, 0.30691f, 0.48756f, 0.51536f, 0.91747f, 0.21523f, 0.86620f, 0.22028f, 0.44325f, 0.19055f, 0.66737f, 0.91421f, 0.04506f, 0.58932f, 0.19254f, 0.52392f, 0.57267f, 0.89667f, 0.88762f, 0.35196f, 0.53159f, 0.98224f, 0.76415f, 0.46777f, 0.15444f, 0.81293f, 0.21604f, 0.96727f, 0.90532f, 0.18860f, 0.93761f, 0.83361f, 0.49551f, 0.42517f, 0.34897f, 0.41298f, 0.64040f, 0.21517f, 0.63326f, 0.08365f, 0.40572f, 0.30063f, 0.99786f, 0.45078f, 0.88995f, 0.19040f, 0.97470f, 0.46261f, 0.08707f, 0.86231f, 0.81457f, 0.61867f, 0.84455f, 0.57872f, 0.08644f, 0.99899f, 0.39165f, 0.30248f, 0.96627f, 0.29697f, 0.49108f, 0.90388f, 0.13058f, 0.98659f, 0.32905f, 0.47955f, 0.39957f, 0.96944f, 0.69471f, 0.03283f, 0.05310f, 0.10043f, 0.33345f, 0.05096f, 0.55121f, 0.22340f, 0.24136f, 0.52591f, 0.68601f, 0.32843f, 0.38822f, 0.50059f, 0.94710f, 0.23277f, 0.07931f, 0.03354f, 0.23177f, 0.47096f, 0.33602f, 0.19803f, 0.76793f, 0.82710f, 0.10191f, 0.89851f, 0.81369f, 0.43096f, 0.37805f, 0.21326f, 0.40040f, 0.07277f, 0.24609f, 0.45350f, 0.17320f, 0.57954f, 0.50446f, 0.72441f, 0.80294f, 0.74582f, 0.25032f, 0.48895f, 0.07425f, 0.63854f, 0.98954f, 0.02135f, 0.87131f, 0.06885f, 0.05489f, 0.10308f, 0.53981f, 0.39091f, 0.30111f, 0.30774f, 0.21801f, 0.40303f, 0.20625f, 0.03170f, 0.83399f, 0.58430f, 0.24495f, 0.23439f, 0.65707f, 0.49104f, 0.68789f, 0.83027f, 0.07058f, 0.19235f, 0.55468f, 0.87352f, 0.93817f, 0.80500f, 0.36247f, 0.01242f, 0.44354f, 0.35201f, 0.03377f, 0.31485f, 0.42085f, 0.08866f, 0.41793f, 0.96066f, 0.47957f, 0.71904f, 0.26840f, 0.69758f, 0.12207f, 0.47465f, 0.72927f, 0.95606f, 0.05895f, 0.97423f, 0.19045f, 0.71602f, 0.46527f, 0.87834f, 0.54629f, 0.53585f, 0.07069f, 0.10097f, 0.40936f, 0.00887f, 0.90596f, 0.77183f, 0.02129f, 0.34950f, 0.12384f, 0.05506f, 0.66435f, 0.54469f, 0.14373f, 0.08228f, 0.50535f, 0.62330f, 0.80132f, 0.77375f, 0.32088f, 0.92339f, 0.24840f, 0.05015f, 0.87944f, 0.30734f, 0.02438f, 0.06989f, 0.02336f, 0.48965f, 0.94823f, 0.56964f, 0.02549f, 0.01893f, 0.67061f, 0.43486f, 0.02779f, 0.57657f, 0.20669f, 0.04908f, 0.92607f, 0.33053f, 0.10414f, 0.59042f, 0.87522f, 0.24787f, 0.67270f, 0.38057f, 0.87117f, 0.47402f, 0.15432f, 0.19204f, 0.39740f, 0.40272f, 0.24220f, 0.27685f, 0.71006f, 0.26657f, 0.34674f, 0.73342f, 0.75622f, 0.29497f, 0.30307f, 0.78171f, 0.31390f, 0.97368f, 0.21657f, 0.34170f, 0.55025f, 0.42326f, 0.39078f, 0.47632f, 0.75378f, 0.49492f, 0.06674f, 0.62900f, 0.74279f, 0.73944f, 0.00957f, 0.61396f, 0.21346f};
    float mat_b_transpose[625];
    
    float *mat_res = new float[row_a * col_b];
    
    // generating float values for mat_a 0 to 2
    for(int i = 0; i < row_a * col_a; i++)
      mat_a[i] = 0.0 + (rand() / ( RAND_MAX / (2.0 - 0.0) ) ) ;  //Generate number between 0 to 2
    
    

    // matrix multiplication unit
    cpu_matrix_mult_v2(mat_a, mat_b, mat_b_transpose, mat_res, row_a, col_a, row_b, col_b);


    delete mat_a;
    delete mat_res;




    return 0;
}






    // generating random float numbers 0 to 1
    // for(int i = 0; i < 625; i++)
    //   mat_b[i] = 0.0 + (rand() / ( RAND_MAX / (1.0 - 0.0) ) ) ;  //Generate number between 0 to 1

    // printing floating values for mat_b
    // for(int i = 0; i < 625; i++){
    //     // auto temp = std::to_string(mat_b[i]) + "f";
    //     printf("%.5f", mat_b[i]);
    //     printf("f, ");
    // }


